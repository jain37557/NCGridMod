# coding: utf-8
from pyomo.environ import *

model = AbstractModel()

######=================================================########
######               Segment B.1                       ########
######=================================================########

### Generators by fuel-type
model.Coal = Set()
model.Oil = Set()
model.NGCC = Set()
model.NGCT = Set()
model.Gas = model.NGCC | model.NGCT

#all generators
model.Generators = model.Coal | model.Oil | model.NGCC | model.NGCT

#UC generators
model.UC = model.Coal | model.NGCC
model.Flex = model.Oil | model.NGCT

# transmission sets
model.lines = Set() #Set of linearized segments l
model.buses = Set() #Set of linearized segments b

#Generator type
model.typ = Param(model.Generators,within=Any)

#Node name
model.node = Param(model.Generators,within=Any)

#Max capacity
model.maxcap = Param(model.Generators)

#Min capacity
model.mincap = Param(model.Generators)

#Heat rate
model.heat_rate = Param(model.Generators)

#Variable O&M
model.var_om = Param(model.Generators)

#No load cost
model.no_load  = Param(model.Generators)

#Start cost
model.st_cost = Param(model.Generators)

#Ramp rate
model.ramp  = Param(model.Generators)

#Minimun up time
model.minup = Param(model.Generators)

#Minmun down time
model.mindn = Param(model.Generators)


model.Reactance = Param(model.lines)
model.FlowLim = Param(model.lines)
model.LinetoBusMap=Param(model.lines,model.buses)
model.BustoUnitMap=Param(model.Generators,model.buses)

######=================================================########
######               Segment B.5                       ########
######=================================================########

######===== Parameters/initial_conditions to run simulation ======####### 
## Full range of time series information
model.SimHours = Param(within=PositiveIntegers)
model.SH_periods = RangeSet(1,model.SimHours+1)
model.SimDays = Param(within=PositiveIntegers)
model.SD_periods = RangeSet(1,model.SimDays+1)

# Operating horizon information 
model.HorizonHours = Param(within=PositiveIntegers)
model.HH_periods = RangeSet(0,model.HorizonHours)
model.hh_periods = RangeSet(1,model.HorizonHours)
model.ramp_periods = RangeSet(2,24)

######=================================================########
######               Segment B.6                       ########
######=================================================########

#Demand over simulation period
model.SimDemand = Param(model.buses*model.SH_periods, within=NonNegativeReals)

#Horizon demand
model.HorizonDemand = Param(model.buses*model.hh_periods,within=NonNegativeReals,mutable=True)

#Must run by bus
model.must = Param(model.buses,within=NonNegativeReals)

#Reserve for the entire system
# model.SimReserves = Param(model.SH_periods, within=NonNegativeReals)
# model.HorizonReserves = Param(model.hh_periods, within=NonNegativeReals,mutable=True)

##Variable resources over simulation period
# model.SimHydro = Param(model.Hydro, model.SH_periods, within=NonNegativeReals)
##model.SimSolar = Param(model.s_nodes, model.SH_periods, within=NonNegativeReals)
##model.SimWind = Param(model.w_nodes, model.SH_periods, within=NonNegativeReals)

#Variable resources over horizon
# model.HorizonHydro = Param(model.Hydro,model.hh_periods,within=NonNegativeReals,mutable=True)
##model.HorizonSolar = Param(model.s_nodes,model.hh_periods,within=NonNegativeReals,mutable=True)
##model.HorizonWind = Param(model.w_nodes,model.hh_periods,within=NonNegativeReals,mutable=True)

######=================================================########
######               Segment B.7                       ########
######=================================================########

######=======================Decision variables======================########
##Amount of day-ahead energy generated by each generator at each hour
model.mwh = Var(model.Generators,model.HH_periods, within=NonNegativeReals,initialize=0)

#1 if unit is on in hour i, otherwise 0
model.on = Var(model.Generators,model.HH_periods, within=Binary, initialize=0)

# #1 if unit is switching on in hour i, otherwise 0
model.switch = Var(model.Generators,model.HH_periods, within=Binary,initialize=0)

# slack variables
model.S = Var(model.buses,model.HH_periods, within=NonNegativeReals,initialize=0)

# #Amount of spining reserve offered by an unit in each hour
# model.srsv = Var(model.Generators,model.HH_periods, within=NonNegativeReals,initialize=0)

# #Amount of non-sping reserve offered by an unit in each hour
# model.nrsv = Var(model.Generators,model.HH_periods, within=NonNegativeReals,initialize=0)

###dispatch of solar-power in each hour
##model.solar = Var(model.s_nodes,model.HH_periods,within=NonNegativeReals)
##
###dispatch of wind-power in each hour
##model.wind = Var(model.w_nodes,model.HH_periods,within=NonNegativeReals)

# transmission line variables 
model.Flow= Var(model.lines,model.hh_periods)
model.Theta= Var(model.buses,model.hh_periods)


######=================================================########
######               Segment B.8                       ########
######=================================================########

######================Objective function=============########

def SysCost(model):
    fixed = sum(model.no_load[j]*model.on[j,i] for i in model.hh_periods for j in model.Generators)
    starts = sum(model.st_cost[j]*model.switch[j,i] for i in model.hh_periods for j in model.Generators)
    coal = sum(model.mwh[j,i]*(model.heat_rate[j]*2 + model.var_om[j]) for i in model.hh_periods for j in model.Coal)  
    oil = sum(model.mwh[j,i]*(model.heat_rate[j]*10 + model.var_om[j]) for i in model.hh_periods for j in model.Oil)
    gas = sum(model.mwh[j,i]*(model.heat_rate[j]*4.5 + model.var_om[j]) for i in model.hh_periods for j in model.Gas)
    slack = sum(model.S[z,i]*10000000 for i in model.hh_periods for z in model.buses)

    return coal + oil + gas + slack + fixed + starts

model.SystemCost = Objective(rule=SysCost, sense=minimize)



######=================================================########
######               Segment B.9                      ########
######=================================================########

####========== Logical Constraint =========#############

# Switch is 1 if unit is turned on in current period
def SwitchCon(model,j,i):
    return model.switch[j,i] >= 1 - model.on[j,i-1] - (1 - model.on[j,i])
model.SwitchConstraint = Constraint(model.Generators,model.hh_periods,rule = SwitchCon)


# # ######========== Up/Down Time Constraint =========#############
# #Min Up time
def MinUp(model,j,i,k):
    if i > 0 and k > i and k < min(i+model.minup[j]-1,model.HorizonHours):
        return model.on[j,i] - model.on[j,i-1] <= model.on[j,k]
    else: 
        return Constraint.Skip
model.MinimumUp = Constraint(model.Generators,model.HH_periods,model.HH_periods,rule=MinUp)

##Min Down time
def MinDown(model,j,i,k):
    if i > 0 and k > i and k < min(i+model.mindn[j]-1,model.HorizonHours):
        return model.on[j,i-1] - model.on[j,i] <= 1 - model.on[j,k]
    else:
        return Constraint.Skip
model.MinimumDown = Constraint(model.Generators,model.HH_periods,model.HH_periods,rule=MinDown)


#####==========Ramp Rate Constraints =========#############
def Ramp1(model,j,i):
    a = model.mwh[j,i]
    b = model.mwh[j,i-1]
    return a - b <= model.ramp[j] 
model.RampCon1 = Constraint(model.Coal,model.ramp_periods,rule=Ramp1)

def Ramp2(model,j,i):
    a = model.mwh[j,i]
    b = model.mwh[j,i-1]
    return b - a <= model.ramp[j] 
model.RampCon2 = Constraint(model.Coal,model.ramp_periods,rule=Ramp2)


######=================================================########
######               Segment B.10                      ########
######=================================================########

#####=========== Capacity Constraints ============##########
# Constraints for Max & Min Capacity of dispatchable resources
def MaxC(model,j,i):
    return model.mwh[j,i]  <= model.on[j,i] * model.maxcap[j] 
model.MaxCap= Constraint(model.Generators,model.hh_periods,rule=MaxC)


def MinC(model,j,i):
    return model.mwh[j,i] >= model.on[j,i] * model.mincap[j]
model.MinCap= Constraint(model.Generators,model.hh_periods,rule=MinC)

# def MaxC2(model,j,i):
#     return model.mwh[j,i]  <= model.maxcap[j] 
# model.MaxCap2= Constraint(model.Flex,model.hh_periods,rule=MaxC2)


#Max capacity constraints on domestic hydropower 
# def HydroC(model,z,i):
#     return model.mwh[z,i] <= model.HorizonHydro[z,i]  
# model.HydroConstraint= Constraint(model.Hydro,model.hh_periods,rule=HydroC)

###Max capacity constraints on solar 
##def SolarC(model,z,i):
##    return model.solar[z,i] <= model.HorizonSolar[z,i]  
##model.SolarConstraint= Constraint(model.s_nodes,model.hh_periods,rule=SolarC)
##
###Max capacity constraints on wind
##def WindC(model,z,i):
##    return model.wind[z,i] <= model.HorizonWind[z,i]  
##model.WindConstraint= Constraint(model.w_nodes,model.hh_periods,rule=WindC)


######=================================================########
######               Segment B.11.1                    ########
######=================================================########

def Nodal_Balance(model,z,i):
    power_flow = sum(model.Flow[l,i]*model.LinetoBusMap[l,z] for l in model.lines)   
    gen = sum(model.mwh[j,i]*model.BustoUnitMap[j,z] for j in model.Generators)    
    slack = model.S[z,i]
    must_run = model.must[z]
    return gen + slack + must_run - power_flow == model.HorizonDemand[z,i] 
model.Node_Constraint = Constraint(model.buses,model.hh_periods,rule=Nodal_Balance)

def Flow_line(model,l,i):
    value = sum(model.Theta[z,i]*model.LinetoBusMap[l,z] for z in model.buses)
    return  100*value == model.Flow[l,i]*model.Reactance[l]
model.FlowL_Constraint = Constraint(model.lines,model.hh_periods,rule=Flow_line)

def Theta_bus(model,i):
        return model.Theta['n_6682',i] == 0
model.ThetaB_Constraint = Constraint(model.hh_periods,rule=Theta_bus)

def FlowUP_line(model,l,i):
    return  model.Flow[l,i] <= model.FlowLim[l]
model.FlowU_Constraint = Constraint(model.lines,model.hh_periods,rule=FlowUP_line)

def FlowLow_line(model,l,i):
    return  -1*model.Flow[l,i] <= model.FlowLim[l]
model.FlowLL_Constraint = Constraint(model.lines,model.hh_periods,rule=FlowLow_line)

######=================================================########
######               Segment B.13                      ########
######=================================================########

######===================Reserve and zero-sum constraints ==================########

# ##System Reserve Requirement
# def SysReserve(model,i):
#     return sum(model.srsv[j,i] for j in model.ResGenerators) + sum(model.nrsv[j,i] for j in model.ResGenerators) >= model.HorizonReserves[i]
# model.SystemReserve = Constraint(model.hh_periods,rule=SysReserve)

# ##Spinning Reserve Requirement
# def SpinningReq(model,i):
#     return sum(model.srsv[j,i] for j in model.ResGenerators) >= model.spin_margin * model.HorizonReserves[i] 
# model.SpinReq = Constraint(model.hh_periods,rule=SpinningReq)           

# ##Spinning reserve can only be offered by units that are online
# def SpinningReq2(model,j,i):
#     return model.srsv[j,i] <= model.on[j,i]*model.maxcap[j]
# model.SpinReq2= Constraint(model.Generators,model.hh_periods,rule=SpinningReq2) 

# ##Non-Spinning reserve can only be offered by units that are offline
# def NonSpinningReq(model,j,i):
#     return model.nrsv[j,i] <= (1 - model.on[j,i])*model.maxcap[j]
# model.NonSpinReq= Constraint(model.Generators,model.hh_periods,rule=NonSpinningReq)


# ######========== Zero Sum Constraint =========#############
# def ZeroSum(model,j,i):
#     return model.mwh[j,i] + model.srsv[j,i] + model.nrsv[j,i] <= model.maxcap[j]
# model.ZeroSumConstraint=Constraint(model.Generators,model.hh_periods,rule=ZeroSum)


######======================================#############
######==========        End        =========#############
######=======================================############

